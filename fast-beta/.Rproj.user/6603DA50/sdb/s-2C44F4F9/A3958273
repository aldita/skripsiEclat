{
    "collab_server" : "",
    "contents" : "# untuk memindahkan panel kembali ke data setiap berpindah menu\nobserve({\n  if(!identical(input$nav_fast, \"Eclat\")){\n    updateTabsetPanel(session, \"eclattab\", selected = \"Data\")\n  }})\n  \n  #Mengambil data\n  getData <- reactive({\n    getdata()\n  })\n  \n  #Mengambil nama variabel\n  vars <- reactive({\n    if (!is.null(getData())){\n      var <- names(getData())\n      }\n    else {\n      var <- NULL\n      }\n    return(var)\n  })\n  \n  #Mengambil list nama variabel\n  variable <- reactive({\n    if (!is.null(vars())){\n      var <- as.list(vars()[])\n    }\n    else {\n      var <- NULL\n    }\n    return(var)\n  })\n  \n  #Mengambil nama variabel jika ada id\n  id <- reactive({\n    if (!is.null(vars())) {\n      var <- as.list(vars()[which(!(vars() %in% input$chooseVar))])\n    }\n    else {\n      var <- NULL\n    }\n    return(var)\n  })\n  \n  #original data\n  rawdata <- reactive({\n    dfVardata <- as.matrix(getData()[,input$chooseVar])\n    dfVarId <- as.matrix(getData()[,input$chooseId])\n    df <- as.data.frame(cbind(dfVarId,dfVardata))\n    return(df)\n  })\n  \n  #konvert data\n  dataTrans <- function(){\n    tr_basket <- rawdata()\n    if (!is.null(input$chooseId)){\n      #if(ncol(rawdata())>2){\n      #  df_itemList <- ddply(tr_basket,input$chooseId, function(df1)paste(tr_basket[,3], collapse = \",\"))\n      #  } else {\n      tr_basket <- split(tr_basket[,2],tr_basket[,1])\n      \n      #if (input$removeDataEclat == TRUE) { #seems unnecessary\n      #  tr_basket2 <- sapply(1:length(tr_basket), function(x) unique(tr_basket[[x]])) #rm.duplicated\n      #  # tr_basket<-as.data.frame(tr_basket)\n      #  ap<-sapply(1:length(tr_basket2), function(x) if(length(tr_basket2[[x]])>1) paste(tr_basket2[[x]]))\n      #  names(ap)<-names(tr_basket)\n      #  tr_basket<-ap[!sapply(ap,is.null)]\n      #}\n      #  } \n    }\n    hasil <- as(tr_basket,\"transactions\")\n    return(hasil)\n  }\n  \n  #transaksi data\n  outDataTrans <- reactive({\n    odt <- as(dataTrans(), \"data.frame\")\n    dtfram <- as.data.frame(cbind(odt[2],odt[1]))\n    colnames(dtfram) <- c(\"transaction ID\",\"itemsets\")\n    return(dtfram)\n  })\n  \n  #transaksi vertikal\n  transver <- reactive({\n    tl <- as(dataTrans(), \"tidLists\")\n    return(tl)\n  })\n  \n  #chooseFreq <- function() {\n  # frequency <- itemFrequency(dataTrans())\n  #frequency <- as.data.frame(frequency)\n  #  item<-rownames(frequency)\n  #  datfram <- as.data.frame(cbind(item,frequency))\n  #  minsup <- minSupEclat()\n  #  minsupCount <- minsup \n  #  datfram <- datfram[datfram$frequency >= minsupCount,] #prune!\n  #  return(datfram)\n  #}\n  \n  #tableItemset <- function(itemset) {\n  #  d <- inspect(dataTrans())[1]  #item pada transaksi\n  #  f <- sapply(1:nrow(d), function(x) gsub(\"\\\\{|\\\\}\",\"\",as.character(d[x,1])))\n  #  item2 <- chooseFreq()[,1]\n  #  b <- combn(item2,itemset)\n  #  combination <- sapply(1:ncol(b),function(i)  paste(b[,i], collapse = \",\"))\n  #  names(data) <- NULL\n  #  dfs <- lapply(list(f, combination), function(x)  melt(strsplit(x, \",\")))\n  #  m <- merge(dfs[[2]], dfs[[1]], by = 1)\n  #  f <- function(n) sum(aggregate(value ~ L1.y, m[m$L1.x == n,], function(x) length(unique(x)) == itemset)$value)\n  #  frequency <- sapply(1:length(combination), f)\n  #  frequency <- as.data.frame(as.numeric(frequency/nrow(dataTrans())))\n  #  datfram <- as.data.frame(cbind(combination, frequency))\n  #  colnames(datfram) <- c(\"combination\",\"frequency\")\n  #  minsupCount <- minSupEclat() \n  #  datfram <- datfram[datfram$frequency >= minsupCount,]\n  #  return(datfram)\n  #}\n  \n  #fungsi frequent itemsets\n  frequent <- function (){\n    f <- ecl()\n    #tl <- tidLists(f)\n    #tl2 <- inspect(tl)\n    #tl2 <- inspect(f)\n    return(f)\n  }\n  \n  #fungsi minimum support\n  minSupEclat <- function() {\n    minSup <- input$minSupEclat\n    if (minSup < 0.001) {\n      minSup <- 0.1\n      updateNumericInput(session,\"minSupEclat\", value = 0.1)\n    }\n    return(minSup)\n  }\n  \n  #fungsi minimum confidence\n  minConfEclat <- function() {\n    minConf <- input$minConfEclat\n    if (minConf < 0.0001) {\n      minConf <- 0.1\n      updateNumericInput(session,\"minConfEclat\", value = 0.01)\n    }\n    return(minConf)\n  }\n  \n  #fungsi minimum item\n  minIEclat <- function() {\n    minI <- input$minIEclat\n    if (minI < 1) {\n      minI <- 1\n      updateNumericInput(session,\"minIEclat\",value = 1)\n    }\n    return(minI)\n  }\n  \n  #fungsi maksimum item\n  maxIEclat <- function() {\n    maxI <- input$maxIEclat\n    if (maxI < minIEclat()) {\n      maxI <- minIEclat()+1\n      updateNumericInput(session,\"maxIEclat\",value = minIEclat()+1)\n    }\n    return(maxI)\n  }\n  \n  #fungsi eclat\n  ecl <- reactive({\n    itemsets <-eclat(dataTrans(), \n                     parameter = list(\n                       supp = minSupEclat(), \n                       minlen = minIEclat(), \n                       maxlen = maxIEclat()\n                     )\n    )\n    return(itemsets)\n  })\n  \n  #fungsi rules\n  fungsi <- function() {\n    #if (length(ecl())>0){\n    rules<- ruleInduction(ecl(),\n                          dataTrans(),\n                          confidence = minConfEclat()\n    )\n    if(input$removeRedundant==TRUE){\n      rules.pruned <- rules[!is.redundant(rules)]\n      rules<-rules.pruned\n      #} else {\n      #  rules < NULL\n      #}\n    }\n    return(rules)\n  }\n  \n  #fungsi rules dgn interest \n  dataRules <- function() {\n    if (length(ecl())>0) {\n      data<- fungsi()\n      if (!is.null(input$intmeasure)) {\n        quality(data) <- cbind(\n          quality(data), \n          otherin()\n          #interestMeasure(data,c(input$intmeasure), dataTrans()), \n          #RPF=RPF()\n        )}\n      data2 <- inspect(data)\n      data2 <- data2[,-7]\n    } else {\n      data2 <- data.frame()\n    }\n    return(data2)\n  }\n  \n  #RPF\n  RPF <- function(){\n    rp <- interestMeasure(\n      fungsi(), \"support\", dataTrans()\n    ) * interestMeasure(\n      fungsi(), \"confidence\", dataTrans()\n    )\n    return(rp)\n  }\n  \n  #other interest\n  otherin <- function(){\n    rpf      <- \"RPF\"       %in% input$intmeasure\n    chi      <- \"chiSquared\"       %in% input$intmeasure\n    kul      <- \"kulczynski\"       %in% input$intmeasure\n    imb      <- \"imbalance\"       %in% input$intmeasure\n    \n    interest <- NULL\n    if(rpf){\n      interest <- cbind(interest, RPF=RPF())\n    }\n    if(chi) {\n      interest <- cbind(interest, chisquare = interestMeasure(fungsi(),\"chiSquared\", dataTrans()))\n    }\n    if(kul) {\n      interest <- cbind(interest, kulczynski=interestMeasure(fungsi(),\"kulczynski\", dataTrans()))\n    }\n    if(imb) {\n      interest <- cbind(interest, imbalance=interestMeasure(fungsi(),\"imbalance\", dataTrans()))\n    }\n    return(interest)\n  }\n  \n  #input jumlah top freq\n  numberFreqEclat <- function() {\n    na <- input$numberFreqEclat\n    if (na > nrow(transver())) {\n      na <- nrow(transver())\n      updateNumericInput(session,\"numberFreqEclat\", value = na)\n    }\n    return(na)\n  }\n  \n  #input jumlah rules\n  numberRuleEclat <- function() {\n    nr <- input$numberRuleEclat\n    if (nr > length(fungsi())) {\n      nr <- length(fungsi())\n      updateNumericInput(session,\"numberRuleEclat\", value = length(fungsi()))\n    }\n    return(nr)\n  }\n  \n  #sampling rule\n  sampel <- function(){\n    sam <- sample(fungsi(),numberRuleEclat())\n    return(sam)\n  }\n  \n  #frequency plot\n  fplot<- function(){\n    plot <- itemFrequencyPlot(dataTrans(), \n                              topN = numberFreqEclat(), \n                              xlab = \"items\" ,\n                              ylab = \"support\", \n                              main = paste(\"Frequency Plot for\",  numberFreqEclat(), \"Items\", sep=\" \"))\n    return(plot)\n  }\n  \n  #scatter plot\n  splot<- function(){\n    plot <- plot(sampel())\n    return(plot)\n  }\n  \n  #grouped plot\n  goplot<- function(){\n    plot <- plot(sampel(), method = \"grouped\")\n    return(plot)\n  }\n  \n  #graph plot\n  gaplot<- function(){\n    plot <- plot(sampel(), method = \"graph\")\n    return(plot)\n  }\n  \n  #paracoord plot\n  #pplot<- function(){\n  #  plot <- plot(sampel(), method = \"paracoord\", control=list(reorder=TRUE))\n  #  return(plot)\n  #}\n  \n  #download report\n  output$downloadReportEclat <- downloadHandler(\n    filename = function() {\n      paste('Association Rules ECLAT Algorithm Report', sep = '.', \n            switch(\n              input$formatEclat, PDF = 'pdf', HTML = 'html', Word = 'docx'\n            )\n      )\n    },\n    content = function(file) {\n      src <- normalizePath('eclat-report.Rmd')\n      \n      # temporarily switch to the temp dir, in case you do not have write\n      # permission to the current working directory\n      owd <- setwd(tempdir())\n      on.exit(setwd(owd))\n      file.copy(src, 'eclat-report.Rmd')\n      \n      library(rmarkdown)\n      out <- render('eclat-report.Rmd', switch(\n        input$formatEclat,\n        PDF = pdf_document(), HTML = html_document(), Word = word_document()\n        )\n      )\n      file.rename(out, file)\n    }\n  )\n  \n  #tampilan Utama\n  output$eclat <- renderUI({\n    sidebarLayout(\n      sidebarPanel(\n        div(class=\"busy\", \n            p(\"Calculation in progress...\"), \n            img(src=\"ajaxloaderq.gif\")\n        ),\n        uiOutput(outputId = 'nav_menu'),\n        bsCollapse(\n          open = \"Data Properties\",\n          bsCollapsePanel(\"Data Properties\",\n                          uiOutput(outputId = 'chooseVarEclat'),\n                          conditionalPanel(condition = \"input.chooseVar.length <2\",\n                                           checkboxInput(\n                                             \"singleToBasket\",\"Aggregate item\", FALSE),\n                                           conditionalPanel(condition = \"input.singleToBasket==true\",\n                                                            uiOutput(\"chooseId\")\n                                           )\n                                           #checkboxInput(\"removeDataEclat\",\"Remove duplicated item\", FALSE)\n                          )\n          ),\n          \n          bsCollapsePanel(\"Parameter Properties\",\n                          numericInput(\n                            \"minSupEclat\",\"Minimum support :\", min = 0.0001, max = 1, value =0.1, step = 0.0001\n                          ),\n                          numericInput(\n                            \"minConfEclat\",\"Minimum confidence :\", min = 0.0001, max = 1.0001, value = 0.1,step =0.0001\n                          ),\n                          numericInput(\n                            \"minIEclat\",\"Minimum item(s):\", min = 1,value = 1, step = 1\n                          ),\n                          numericInput(\n                            \"maxIEclat\",\"Maximum items:\", min = 2,value = 10, step = 1\n                          ),\n                          checkboxInput(\n                            \"removeRedundant\", \"Remove redundant\", FALSE\n                          ),\n                          #actionButton(\"getRules\",\"Get Results\")\n                          checkboxInput(\n                            \"intMea\",\"Add Interest Measure\", FALSE\n                          ),\n                          conditionalPanel(condition = \"input.intMea==true\",\n                                           checkboxGroupInput(\n                                             \"intmeasure\", \"Choose interest measure(s):\",\n                                             c(\n                                               \"chi-squared\" = \"chiSquared\",\n                                               \"kulczynski\" = \"kulczynski\",\n                                               \"imbalance\" = \"imbalance\",\n                                               \"RPF\" = \"RPF\"\n                                             )\n                                           )\n                          )\n          ),\n          \n          bsCollapsePanel(\"Plot Properties\",\n                          uiOutput(\"sidePlotFreq\"),\n                          uiOutput(\"sidePlotRules\")\n          ),\n          \n          bsCollapsePanel(\"Report\",\n                          strong(\"Generate Your Report\"),\n                          wellPanel(radioButtons(\"formatEclat\", \"Document format:\", c(\"Word\",\"PDF\" ,\"HTML\")),\n                                    downloadButton(\"downloadReportEclat\")),br(),\n                          strong(\"Share Your Report\"),\n                          bsButton(\"ShareForumEclat\", \"Share to Forum\", style = \"primary\", type = \"action\"),br(),br(),\n                          bsModal2(\"popShareForumEclat\", \"Share Your Analysis\", trigger = \"ShareForumEclat\",\n                                   uiOutput(\"modalShareEclat\")\n                          )\n          )\n        )\n      ),\n      \n      mainPanel(\n        div(class=\"busy\", \n            p(\"Calculation in progress...\"), \n            img(src=\"ajaxloaderq.gif\")\n        ),\n        tabsetPanel(id = 'eclattab',\n                    tabPanel(\n                      title = \"Data\",\n                      tabsetPanel(id = 'DataEclat',\n                                  tabPanel(\n                                    title = \"Original Data\",\n                                    uiOutput('preprop')\n                                  ),\n                                  tabPanel(\n                                    title = \"Transaction Data\",\n                                    uiOutput('transaksiEclat')\n                                  ),\n                                  tabPanel(\n                                    title = \"Vertical Transaction Data\",\n                                    uiOutput('transaksiVertikal')\n                                  )\n                      )\n                    ),\n                    \n                    tabPanel(\n                      title = \"Result\",\n                      tabsetPanel(\n                        id = 'SummaryEclat',\n                        tabPanel(\n                          title = \"Frequent Itemsets\",\n                          uiOutput('iFreq')\n                          #wellPanel(\n                          #  style = \"overflow-y:scroll; max-width: 960px; max-height : 600px\",\n                          #  dataTableOutput(\"iFreq\")\n                          #  )\n                        ),\n                        tabPanel(\n                          title = \"Rules\",\n                          uiOutput('rulesEclat')\n                          #wellPanel(\n                          #  style = \"overflow-y:scroll; max-width: 960px; max-height : 600px\",\n                          #  dataTableOutput(\"rulesEclat\")\n                          #  )\n                        )\n                      )\n                      #uiOutput('tampil_summary')\n                    ),\n                    \n                    tabPanel(\n                      title = \"Plot\",\n                      tabsetPanel(id = 'PlotEclat',\n                                  tabPanel(\n                                    title = \"Frequency Plot\",\n                                    plotOutput(\"FreqPlot\")\n                                  ),\n                                  tabPanel(\n                                    title = \"Scatter Plot\",\n                                    plotOutput(\"ScatterPlot\")\n                                  ),\n                                  tabPanel(\n                                    title = \"Grouped Plot\",\n                                    plotOutput(\"GroupedPlot\")\n                                  ),\n                                  tabPanel(\n                                    title = \"Graph Plot\",\n                                    plotOutput(\"GraphPlot\")\n                                  )\n                                  #tabPanel(\n                                  #  title = \"Paracoord Plot\",\n                                  #  plotOutput(\"ParacoordPlot\")\n                                  #  )\n                      )\n                    )\n        )\n      )\n    )\n  })\n  \n  #menunjukkan status modul\n  output$nav_menu <- renderUI({\n    wellPanel(\n      HTML(paste(\"<label><strong>Menu:\",\"Association Rule\",\"</strong></label>\")),\n      HTML(paste(\"<label><strong>Tool:\",isolate(input$nav_fast),\"</strong></label><br>\")),\n      HTML(paste(\"<label><strong>Data:\",input$datasets,\"</strong></label><br>\")),\n      helpAndReport2(\n        'Eclat','eclatHelp', inclMD2(\"tools/help/eclat.md\")\n      )\n    ) \n  })\n  \n  #UI button select\n  #output$selectDeselect <- renderUI({\n  #  vars<- upload()\n  #if (!is.null(variable())) {\n  #    actionButton(\"selectDeselect\", \"Select/Deselect all\", class = \"btn-block btn-primary\")\n  #}\n  #})\n  \n  #tampilan pilih variabel\n  output$chooseVarEclat <- renderUI({\n    #vars<- upload()\n    #if (!is.null(input$selectDeselect)) {\n    #  if (input$selectDeselect %% 2 == 0) {\n    #    selectInput(\n    #      \"chooseVar\",\"Select one or more variables:\",names(vars),names(vars),multiple =T\n    #    )\n    #  } else {\n    selectInput(\n      \"chooseVar\",\"Select variable(s):\",variable(),selected = variable(),multiple =T, selectize= F\n    )\n    #  }\n    #}\n  })\n  \n  #Tampilan pilih id agregate\n  output$chooseId <- renderUI({\n    selectInput(\n      \"chooseId\",\"Aggregate by:\",id(),selected = NULL,multiple= T, selectize= T)\n  })\n  \n  #tampilan input parameter plot frequency\n  output$sidePlotFreq<-renderUI({\n    numericInput(\n      \"numberFreqEclat\", \"Number of top item :\", nrow(transver()), min=1, step=1)\n  })\n  \n  #tampilan input parameter plot rules\n  output$sidePlotRules<-renderUI({\n    numericInput(\n      \"numberRuleEclat\",\"Number of rules :\", nrow(dataRules()) ,min = 1, step = 1)\n  })\n  \n  #tampilan tab original data\n  output$preprop <- renderUI({\n    list(\n      wellPanel(\n        style = \"overflow-y:scroll; max-width: 960px; max-height : 600px\",\n        renderDataTable({\n          shiny::validate(\n            need(input$chooseVar !=\"\", \"Please Select one or more Variable(s) of Data from Data Properties Sidebar\")\n          )\n          rawdata()\n        },\n        options = list(\n          orderClasses = TRUE, bCaseInsensitive = TRUE,\n          lengthMenu = c(100, 200, 500), pageLength = 100\n        )\n        )\n      )\n    )\n  })\n  \n  #tampilan tab transaction data\n  output$transaksiEclat <- renderUI({\n    list(\n      wellPanel(\n        style = \"overflow-y:scroll; max-width: 960px; max-height : 600px\",\n        renderDataTable({\n          shiny::validate(\n            need(input$chooseVar !=\"\", \"Please Select one or more Variable(s) of Data from Data Properties Sidebar\")\n          )\n          outDataTrans()\n        },\n        options = list(\n          orderClasses = TRUE, bCaseInsensitive = TRUE,\n          lengthMenu = c(100, 200, 500), pageLength = 100\n        )\n        )\n      )\n    )\n  })\n  \n  #tampilan tab transaksi Vertikal\n  output$transaksiVertikal <- renderUI({\n    list(\n      wellPanel(\n        style = \"overflow-y:scroll; max-width: 960px; max-height : 600px\",\n        renderDataTable({\n          shiny::validate(\n            need(input$chooseVar !=\"\", \"Please Select one or more Variable(s) of Data from Data Properties Sidebar\")\n          )\n          inspect(transver())\n        },\n        options = list(\n          orderClasses = TRUE, bCaseInsensitive = TRUE,\n          lengthMenu = c(50,100, 200, 500), pageLength = 100\n        )\n        )\n      )\n    )\n  })\n  \n  #tampilan tab frequent itemset\n  output$iFreq <- renderUI({\n    list(\n      wellPanel(\n        style = \"overflow-y:scroll; max-width: 960px; max-height : 600px\",\n        renderDataTable({\n          shiny::validate(\n            need(input$chooseVar !=\"\", \"Please Select one or more Variable(s) of Data from Data Properties Sidebar\"),\n            need(length(frequent()) >0, \"Zero frequent items generated. Please adjust minimum support from Parameter Properties Sidebar\"))\n          inspect(frequent())\n        }, \n        options = list(\n          orderClasses = TRUE, bCaseInsensitive = TRUE,\n          lengthMenu = c(10, 20, 30), pageLength = 10\n        )\n        )\n      )\n    )\n  })\n  \n  #tampilan tab rules\n  output$rulesEclat <- renderUI({\n    list(\n      wellPanel(\n        style = \"overflow-y:scroll; max-width: 960px; max-height : 600px\",\n        renderDataTable({\n          shiny::validate(\n            need(input$chooseVar !=\"\", \"Please Select one or more Variable(s) of Data from Data Properties Sidebar\"),\n            #need(length(ecl())>0, \"Zero rules generated. Please adjust minimum support and/or minimum confidence from Parameter Properties Sidebar\"),\n            need(length(dataRules())>0 , \"Zero rules generated. Please adjust minimum support and/or minimum confidence from Parameter Properties Sidebar\"))\n          dataRules()\n        },  \n        options = list(\n          orderClasses = TRUE, bCaseInsensitive = TRUE,\n          lengthMenu = c(5, 10, 15), pageLength = 5\n        )\n        )\n      )\n    )\n  })\n  \n  #tampilan tab scatter plot\n  output$ScatterPlot <- renderPlot({                \n    shiny::validate(\n      need(input$numberRuleEclat >0, \"Please input the number of rules from Plot Properties Sidebar\")\n      )\n    #need(, \"Please increase the number of rules from Plot Properties Sidebar\"))\n    splot()\n  })\n  \n  #tampilan tab grouped plot\n  output$GroupedPlot <- renderPlot({\n    shiny::validate(\n      need(input$numberRuleEclat >0, \"Please input the number of rules from Plot Properties Sidebar\")\n      )\n    #need(sampel()=0, \"Please increase the number of rules from Plot Properties Sidebar\"))\n    goplot()\n  })\n  \n  #tampilan tab graph plot\n  output$GraphPlot <- renderPlot({\n    shiny::validate(\n      need(input$numberRuleEclat >0, \"Please input the number of rules from Plot Properties Sidebar\"))\n    #need(sampel()=0, \"Please increase the number of rules from Plot Properties Sidebar\"))\n    gaplot()\n  })\n  \n  #tampilan tab paracoord plot\n  #output$ParacoordPlot <- renderPlot({\n  #  shiny::validate(need(input$numberRuleEclat >0, \"Please input the number of rules from Plot Properties Sidebar\"))\n    # need(sampel()=0, \"Please increase the number of rules from Plot Properties Sidebar\"))\n  #  pplot()\n  #})\n  \n  #tampilan tab frequency plot\n  output$FreqPlot <- renderPlot({\n    shiny::validate(\n      need(input$numberFreqEclat >0, \"Please input the number of rules from Plot Properties Sidebar\"))\n    #need(sampel()=0, \"Please increase the number of rules from Plot Properties Sidebar\"))\n    fplot()\n  })\n  \n  ",
    "created" : 1502155506147.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4073853197",
    "id" : "A3958273",
    "lastKnownWriteTime" : 1503306807,
    "last_content_update" : 1503306807577,
    "path" : "~/Skripsi/2/fast-beta/fast-beta/tools/analysis/ui.R",
    "project_path" : "tools/analysis/ui.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}