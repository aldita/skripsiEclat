{
    "collab_server" : "",
    "contents" : "################################################################\n# fungsi yang digunakan bersama dalam aplikasi\n################################################################\n# mengganti data\nchangedata <- function(addCol, addColName = \"\") {\n  if(nrow(getdata()) == nrow(addCol) && addColName[1] != \"\") {\n    return(values[[input$datasets]][,addColName] <- addCol)\n  }\n}\n\nchangedata_names <- function(oldnames, newnames) {\n  upnames <- colnames(values[[input$datasets]])\n  upnames[which(upnames %in% oldnames)] <- newnames\n  return(colnames(values[[input$datasets]]) <- upnames)\n}\n\ninChecker <- function(tocheck) {\n  ifelse(sum(tocheck %in% varnames()) < length(tocheck), return(NULL), return('OK'))\n}\n\n# fungsi untuk mengambil data dari varaibel global berdasarkan pilihan user\ngetdata <- reactive({\n  values[[input$datasets]]\n})\n\n# mendapatkan kelas dari data\ngetdata_class <- reactive({\n  # don't use isolate here or values won't change when the dataset is changed\n  cls <- sapply(getdata(), function(x) class(x)[1])\n  gsub(\"ordered\",\"factor\", cls)\n})\n\ngetdata_class_ts <- reactive({\n  # don't use isolate here or values won't change when the dataset is changed\n  cls <- sapply(ts(getdata()), function(x) class(x)[1])\n  gsub(\"ordered\",\"factor\", cls)\n})\n\n# mengambil nama variabel dari data\nvarnames <- reactive({\n  dat <- getdata_class()\n  vars <- names(dat)\n  names(vars) <- paste(vars, \" {\", dat, \"}\", sep = \"\")\n  vars\n})\n\nvarnames_ts <- reactive({\n  dat <- getdata_class_ts()\n  vars <- names(dat)\n  names(vars) <- paste(vars, \" {\", dat, \"}\", sep = \"\")\n  vars\n})\n# untuk mengubah tanggal menjadi karakter\ndate2character <- reactive({\n  date2character_dat(getdata())\n})\n\n# proses mengubah tanggal menjadi karakter\ndate2character_dat <- function(dat) {\n  # xtable tidak bisa memakai tipe dates\n  isDate <- c(sapply(dat, is.Date))\n  dat[,isDate] <- sapply(dat[,isDate], as.character)\n  dat\n}\n\n################################################################\n# fungsi untuk memudahkah membuat input dan output\n################################################################\n# mengatur lebar plot sesuai dengan input$viz_plot_width di visualize.R, defaultnya 650px\nplotWidth <- function() {\n  ifelse(is.null(input$viz_plot_width), return(values$plotWidth), return(input$viz_plot_width))\n}\n\n# mengatur tinggi plot sesuai dengan input$viz_plot_height di visualize.R, defaultnya 650px\nplotHeight <- function() {\n  ifelse(is.null(input$viz_plot_width), return(values$plotHeight), return(input$viz_plot_height))\n}\n\nstatPanel <- function(fun_name, rfun_label, fun_label, widthFun, heightFun) {\n  \n  if(isolate(input$nav_fast) != fun_name) return()\n  \n  sum_name <- paste0(\"summary_\", fun_label)\n  plot_name <- paste0(\"plots_\", fun_label)\n  \n  # Generate output for the summary tab\n  output[[sum_name]] <- renderPrint({\n    \n    result <- get(rfun_label)()\n    # when no analysis was conducted (e.g., no variables selected)\n    if(is.character(result)) return(cat(result,\"\\n\"))\n    \n    get(sum_name)()\n  })\n  \n  # Generate output for the plots tab\n  output[[plot_name]] <- renderPlot({\n    \n    result <- get(rfun_label)()\n    # when no analysis was conducted (e.g., no variables selected)\n    if(is.character(result)) return(plot(x = 1, type = 'n', main=result, axes = FALSE, xlab = \"\", ylab = \"\"))\n    \n    get(plot_name)()\n  }, width=get(widthFun), height=get(heightFun))\n  \n  return(tabsetPanel(\n    id = paste0(\"tabs_\",fun_label),\n    tabPanel(\"Summary\", verbatimTextOutput(sum_name)),\n    tabPanel(\"Plots\", conditionalPanel(condition=\"!$('html').hasClass('shiny-busy')\",\n                                       plotOutput(plot_name, height = \"100%\")))\n  ))\n}\n\nstatTabPanel <- function(menu_name, fun_name, rfun_label, fun_label, widthFun = \"plotWidth\", heightFun = \"plotHeight\") {\n  isolate({ \n    sidebarLayout(\n      sidebarPanel(\n        # based on https://groups.google.com/forum/?fromgroups=#!topic/shiny-discuss/PzlSAmAxxwo\n        div(class = \"busy\",\n            p(\"Calculation in progress ...\"),\n            img(src=\"ajaxloaderq.gif\")\n        ),\n        wellPanel(\n          HTML(paste(\"<label><strong>Menu:\",menu_name,\"</strong></label>\")),\n          HTML(paste(\"<label><strong>Tool:\",isolate(input$nav_fast),\"</strong></label>\")),\n          HTML(paste(\"<label><strong>Data:\",input$datasets,\"</strong></label>\"))\n        ),\n        uiOutput(paste0(\"ui_\",fun_label))\n      ),\n      mainPanel(\n        statPanel(fun_name, rfun_label, fun_label, widthFun, heightFun)\n      )\n    )\n  })\t\n}\n\n#List direktori\nlist.dirs <- function(path=\".\", pattern=NULL, all.dirs=FALSE,\n                      full.names=FALSE, ignore.case=FALSE) {\n  # use full.names=TRUE to pass to file.info\n  all <- list.files(path, pattern, all.dirs,\n                    full.names=TRUE, recursive=FALSE, ignore.case)\n  dirs <- all[file.info(all)$isdir]\n  # determine whether to return full names or just dir names\n  if(isTRUE(full.names))\n    return(dirs)\n  else\n    return(basename(dirs))\n}\n\n################################################################\n# fungsi untuk membuat popup\n################################################################\nbsModal1 <- function(id, title, trigger, ..., href) {\n  \n  mo <- tags$div(class = \"modal sbs-modal hide fade\", id = id,\n                 \"data-trigger\" = trigger,\n                 tags$div(class = \"modal-header\",\n                          tags$button(Type = \"button\", class = \"close\",\n                                      \"data-dismiss\" = \"modal\", HTML(\"&times;\")),\n                          tags$h3(title)),\n                 body <- tags$div(class = \"modal-body\")\n  )\n  \n  if(!missing(href)) {\n    mo <- addAttribs(mo, \"data-remote\" = href)\n  } else {\n    mo$children[[2]] <- tagAppendChildren(mo$children[[2]], list = list(...))\n  }\n  \n  return(mo)\n  \n}\n\ntoggleModal1 <- function(session, modalId) {\n  \n  session$sendInputMessage(modalId, list(toggle = TRUE))\n  \n}\n\n#####FUNGSI POP UP BARU UNTUK SHINY 0.12\n#Edit dari shinyBS 0.61 (twitter bootstrap 3)\nbsModal2 <- function (id, title, trigger, ..., size, footer=list()){\n  if (!missing(size)) {\n    if (size == \"large\") {\n      size = \"modal-lg\"\n    }\n    else if (size == \"small\") {\n      size = \"modal-sm\"\n    }\n    size <- paste(\"modal-dialog\", size)\n  }\n  else {\n    size <- \"modal-dialog\"\n  }\n  bsTag <- tags$div(class = \"modal sbs-modal fade\", \n                    id = id, tabindex = \"-1\", 'data-sbs-trigger' = trigger, \n                    tags$div(class = size, tags$div(class = \"modal-content\", \n                                                    tags$div(class = \"modal-header\", tags$button(type = \"button\", \n                                                                                                 class = \"close\", 'data-dismiss' = \"modal\", tags$span(HTML(\"&times;\"))),\n                                                             tags$h4(class = \"modal-title\", title)), \n                                                    tags$div(class = \"modal-body\", list(...)), \n                                                    tags$div(class = \"modal-footer\", footer))))}\n\ntoggleModal2 <- function (session, modalId, toggle = \"toggle\"){\n  session$sendInputMessage(modalId, list(toggle = toggle))\n}\n\n########FUNGSI SHARE KE FORUM\nSHAREfile_names<-function(n=1, length=12) {\n  randomString<-c(1:n) \n  for (i in 1:n) {\n    randomString<- paste(sample(c(0:9, letters,LETTERS), length, replace=TRUE), collapse=\"\")\n  }\n  return(randomString)\n}\n\n#menangkap elemen yang ingin dishare\ngetFromCapture <- function(tabel){\n  stre <- \"\"\n  hasilCapture <- capture.output(tabel)\n  for(i in 1:length(hasilCapture)){\n    stre <- paste(stre, hasilCapture[i], \"<br/>\")\n  }\n  return(stre)\n}\n\n#kondisi salah\nidTidakDitemukan <- function(){\n  createAlert(session, \"modalAlert\", alertId = \"gagalAlert\", title = \"Incorrect Username/Password\", content = NULL, style = \"danger\")\n  updateTextInput(session, \"usernameFCMForum\", value=\"\")\n  updateTextInput(session, \"passwordFCMForum\", value=\"\")\n}\n\n#query query pendukung\nsqlQuery <- function (query,type=\"\") {\n  \n  if(type == \"insert\"){\n    DB <- dbConnect(MySQL(), user='root', password='', dbname='fast54', host='localhost')\n    \n    # send Query to btain result set\n    dbSendQuery(DB, query)\n    \n    dbDisconnect(DB)\n  }else{\n    # creating DB connection object with RMysql package\n    DB <- dbConnect(MySQL(), user='root', password='', dbname='fast54', host='localhost')\n    \n    # send Query to btain result set\n    rs <- dbSendQuery(DB, query)\n    \n    # get elements from result sets and convert to dataframe\n    result <- fetch(rs, -1)\n    \n    dbDisconnect(DB)\n    # return the dataframe\n    return(result)\n  }\n  \n  # close db connection\n\n}\n\n#get user id\ngetUsernameFromDB <- function(){\n  cData <- getClientData()\n  param <- cData[[\"url_search\"]]\n  token <- substr(param,2,nchar(param))\n  queryID <- paste0(\"SELECT name FROM users WHERE remember_token = '\",token,\"' \")\n  theUsername <- sqlQuery(queryID)\n  return(theUsername)\n}\n\ngetUserIDFromDB <- function(usrnm, psswd){\n  queryID <- paste0(\"SELECT id FROM tbl_users WHERE username = '\",usrnm,\"' AND password = MD5('\",psswd,\"')\")\n  theUID <- sqlQuery(queryID)\n  return(theUID)\n}\n\ninsertTopic <- function(subject,content,category){\n  now <- as.POSIXlt(Sys.time())\n  now.str <- format(now,'%Y-%m-%d %H:%M:%S')\n  cData <- getClientData()\n  param <- cData[[\"url_search\"]]\n  token <- substr(param,2,nchar(param))\n  queryID <- paste0(\"SELECT id FROM users WHERE remember_token = '\",token,\"' \")\n  id <- sqlQuery(queryID)\n  node_id <- getNodeId(category)\n  queryText <- paste0(\"INSERT INTO topics (title, body, user_id, node_id,created_at, updated_at,body_original, excerpt) VALUES \")\n  queryText <- paste0(queryText,\"('\",subject,\"'\",\",'\",content,\"','\",id,\"','\",node_id,\"','\",now.str,\"','\",now.str,\"','\",content,\"','\",content,\"')\")\n  sqlQuery(queryText,type=\"insert\")\n}\n\ngetListNode <- function(){\n  queryID <- paste0(\"SELECT id,name FROM nodes\")\n  result <- sqlQuery(queryID)\n  return(result)\n}\n\ngetNodeId <- function(name){\n  queryID <- paste0(\"SELECT id FROM nodes WHERE name ='\",name,\"'\")\n  result <- sqlQuery(queryID)\n  return(result)\n}\n\n#get id dari last post\ngetLastPostID <- function(){\n  queryPostID <- paste0(\"SELECT MAX(last_post_id) FROM bbii_topic\")\n  thepostID <- suppressWarnings(dbGetQuery(mydb, queryPostID))\n  thepostID <- thepostID+1\n  return(thepostID)\n}\n\n#get topic id\ngetTopicID <- function(){\n  queryTopicID <- paste0(\"SELECT MAX(id) FROM bbii_topic\")\n  theTopicID <- suppressWarnings(dbGetQuery(mydb, queryTopicID))\n  theTopicID <- theTopicID+1\n  return(theTopicID)\n}\n\n#get num of post di forum\ngetNumPosts <- function(idForum){\n  queryNumPosts <- paste0(\"SELECT num_posts FROM bbii_forum WHERE id = '\",idForum,\"'\")\n  theNumPosts <- suppressWarnings(dbGetQuery(mydb, queryNumPosts))\n  theNumPosts <- theNumPosts+1\n  return(theNumPosts)\n}\n\n#get num of topics di forum\ngetNumTopics <- function(idForum){\n  queryNumTopics <- paste0(\"SELECT num_posts FROM bbii_forum WHERE id = '\",idForum,\"'\")\n  theNumTopics <- suppressWarnings(dbGetQuery(mydb, queryNumTopics))\n  theNumTopics <- theNumTopics+1\n  return(theNumTopics)\n}\n\n#get individual post count\ngetPostCount <- function(id){\n  queryPostCount <- paste0(\"SELECT posts FROM bbii_member WHERE id='\",id,\"'\")\n  postCount <- suppressWarnings(dbGetQuery(mydb, queryPostCount))\n  postCount <- postCount+1\n  return(postCount)\n}\n\n#query-query SHARE\ncreateTopic <- function(theTopicID, idForum, theUID, subject, bannerPath, thepostID){\n  query <- paste0(\"INSERT INTO fast_backup.bbii_topic (id, forum_id, user_id, title, image, first_post_id, last_post_id, num_replies, num_views, approved, locked, sticky, global, moved, upvoted) VALUES ('\",theTopicID,\"', '\",idForum,\"', '\",theUID,\"', '\",subject,\"','\",bannerPath,\"' ,'\",thepostID,\"', '\",thepostID,\"', '0', '0', '1', '0', '0', '0', '0', '0')\")\n  return(query)\n}\n\npostContent <- function(thepostID, subject, content, summaryForum, theUID, theTopicID, idForum){\n  query <- paste0(\"INSERT INTO fast_backup.bbii_post (id, subject, content, resumes, user_id, topic_id, forum_id, ip, create_time, approved, change_id, change_time, change_reason, upvoted) VALUES ('\",thepostID,\"', '\",subject,\"', '\",content,\"', '<p>\",summaryForum,\"</p>', '\",theUID,\"', '\",theTopicID,\"', '\",idForum,\"', NULL, NULL, '1', NULL, NULL, NULL, '0')\")\n  return(query)\n}\n\nupdateForum <- function(theNumPosts, theNumTopics, thepostID, idForum){\n  query <- paste0(\"UPDATE fast_backup.bbii_forum SET num_posts = '\",theNumPosts,\"', num_topics = '\",theNumTopics,\"', last_post_id = '\",thepostID,\"' WHERE bbii_forum.id = '\",idForum,\"'\")\n  return(query)\n}\n\nlogTopic <- function(theUID, theTopicID, idForum, thepostID){\n  query <- paste0(\"INSERT INTO fast_backup.bbii_log_topic (member_id, topic_id, forum_id, last_post_id) VALUES ('\",theUID,\"','\",theTopicID,\"','\",idForum,\"','\",thepostID,\"')\")\n}\n\nupdatePostCount <- function(thePostCount, theUID){\n  query <- paste0(\"UPDATE fast_backup.bbii_member SET posts = '\", thePostCount, \"' WHERE id='\",theUID,\"'\")\n  return(query)\n}",
    "created" : 1500308014318.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2309842278",
    "id" : "AF1B735A",
    "lastKnownWriteTime" : 1470844850,
    "last_content_update" : 1470844850,
    "path" : "~/Skripsi/2/fast-beta/fast-beta/fast.R",
    "project_path" : "fast.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}