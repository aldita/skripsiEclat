{
    "collab_server" : "",
    "contents" : "#fuzzy c means\n\n#fungsi untuk berpindah ke tab awal ketika user berpindah fungsi\nobserve({\n  if(!identical(input$nav_fast, \"Fuzzy C-Means\")){\n    print(input$nav_fast)\n    updateTabsetPanel(session,\"cMeansMainTab\", selected = \"CMSumm\")\n  }\n})\n\n#menunjukkan status variabel\noutput$statusUICMeans <- renderUI({\n  wellPanel(\n    HTML(paste(\"<label><strong>Menu:\", \"Soft Computing\",\"</strong></label>\")),\n    HTML(paste(\"<label><strong>Tool:\",isolate(input$nav_fast),\"</strong></label></br>\")),\n    HTML(paste(\"<label><strong>Data:\",input$datasets,\"</strong></label>\"))\n  )\n})\n\n#menunjukkan list parameter fuzzy c-means\noutput$parameterCMeans <- renderUI({\n  list(\n    bsCollapse(multiple = TRUE, open = \"colCM1\", id = \"collapseCM\",\n               bsCollapsePanel(\"Cluster Properties\", \n                               uiOutput(\"pilihFacCMeans\"),\n                               uiOutput(\"pilihVarCMeans\"),\n                               numericInput(\"varCMeans_maxIter\", \"Maximum Number of Iterations:\", 100, min = 1, step = 1),\n                               numericInput(\"varCMeans_errTolerance\", \"Error Tolerance:\", 0.0000006, min = 0.0000001, step = 0.0000001),\n                               numericInput(\"varCMeans_jumlahCluster\", \"Number of Cluster:\", 2, min = 1, step = 1),\n                               numericInput(\"varCMeans_pangkat\", \"Weight:\", 2, min=2, step=1),\n                               value=\"colCM1\"),\n               bsCollapsePanel(\"View options\",\n                               numericInput(\"viewCM\", \"Choose number of observation to view in results\", 10, min = 1),\n                               value=\"colCM2\"),\n               bsCollapsePanel(\"Generate Your Report\", \n                               radioButtons('formatFCM', 'Document format', c('Word', 'PDF', 'HTML')),\n                               downloadButton('downloadReportFCM'),\n                               value=\"colCM3\")\n    ),\n    helpText(strong(\"Share your report: \")),\n    bsButton(\"moTrigClusCM\", \"SHARE\", style = \"primary\", type = \"action\"),\n    bsButton(\"moTrigClusCMForum\", \"SHARE to Forum\", style = \"primary\", type = \"action\"),br(),br(),\n    bsModal2(\"moClusCM\", \"Share Your Analysis\", trigger = \"moTrigClusCM\",\n             helpText(\"This feature allows you to share your analysis to 'Gallery Data'\"),\n             textInput(\"titleFCM\", strong(\"Title :\") , value = \"\"),br(),\n             textInput(\"authorFCM\", strong(\"Author :\") , value = \"\"),br(),\n             selectInput(\n               inputId = \"categoryFCM\",\n               label = h5(\"Specify category:\"),\n               choices = list(\n                 \"Clustering\" = \"clustering\",\n                 \"Forecasting\" = \"forecasting\",\n                 \"Ridge Regression\" = \"ridge\",\n                 \"Survival\" = \"survival\",\n                 \"Tobit Regression\" = \"tobit\"),selectize = FALSE,\n               selected = \"clustering\"),br(),\n             strong(\"Summary :\"),br(),\n             HTML('<textarea id=\"summaryFCM\" rows=\"5\" cols=\"20\", class = \"form-control\"></textarea>'), br(), br(),\n             strong(\"Plot :\"),br(),\n             selectInput(\"cMeansPlotTypeShare\", label = \"\", choices = c(\"Plot 1\", \"Plot 2\", \"Plot 3\"), selected = \"Plot 1\", multiple = FALSE),\n             plotOutput(\"cMeansPlotFunctionShareUI\"),br(),\n             bsAlert(\"modalAlert2\"),\n             footer = list(\n               bsButton(\"shareClusCM\", \"Submit to Gallery\", style=\"primary\", type = \"action\"),\n               tags$button(type = \"button\", class = \"btn btn-default\", 'data-dismiss' = \"modal\", \"Close\")\n             )),\n    bsModal2(\"moClusCMForum\", \"Share Your Analysis\", trigger = \"moTrigClusCMForum\",\n             helpText(\"This feature allows you to share your analysis to the Forum in the Fuzzy C-Means Subforum.\"),\n             bsAlert(\"modalAlert\"),\n             textInput(\"usernameFCMForum\", strong(\"Username :\") , value = \"\"), br(),\n             passwordInput(\"passwordFCMForum\", strong(\"Password :\") , value = \"\"),br(),\n             textInput(\"subjectFCMForum\", strong(\"Subject :\") , value = \"\"),br(),\n             strong(\"Summary :\"),br(),\n             HTML('<textarea id=\"summaryFCMForum\" rows=\"5\" cols=\"20\", class = \"form-control\"></textarea>'), br(), br(),\n             footer = list(\n               bsButton(\"shareClusCMForum\", \"Submit to Forum\", style=\"primary\", type = \"action\"),\n               tags$button(type = \"button\", class = \"btn btn-default\", 'data-dismiss' = \"modal\", \"Close\")\n             )),\n    helpAndReport2('Fuzzy C-Means','cmeansclustering', inclMD2(\"tools/help/cmeansclustering.md\"))\n  )\n})\n\n#tampilan utama fuzzy c-means\noutput$fuzzyCMeans <- renderUI({\n  sidebarLayout(\n    sidebarPanel(\n      div(class = \"busy\",\n          p(\"Calculation in progress ...\"),\n          img(src=\"ajaxloaderq.gif\")\n      ),\n      uiOutput(\"statusUICMeans\"),\n      wellPanel(uiOutput(\"parameterCMeans\"))\n    ),\n    mainPanel(\n      tabsetPanel(\n        id = \"cMeansMainTab\",\n        tabPanel(\"Summary\",\n                 uiOutput(outputId = \"cMeansSummary\"),\n                 value = \"CMSumm\"),\n        tabPanel(\"Plot\",\n                 uiOutput(outputId = \"cMeansPlot\"),\n                 value = 2)\n      )\n      \n    )\n  )\n})\n\n#tampilan pilih faktor\noutput$pilihFacCMeans <- renderUI({\n  isFac <- \"factor\" == getdata_class() | \"character\" == getdata_class()\n  vars <- varnames()[isFac]\n  if(length(vars) == 0) return()\n  selectInput(inputId = \"facCMeans\", label = \"Choose factor\", choices = vars, \n              selected = state_multvar(\"facCMeans\", vars), multiple = FALSE, selectize = FALSE)\n})\n\n#tampilan pilih variabel\noutput$pilihVarCMeans <- renderUI({\n    isNum <- \"numeric\" == getdata_class() | \"integer\" == getdata_class()\n    vars <- varnames()[isNum]\n    if(length(vars) == 0) return()\n    selectInput(inputId = \"varCMeans\", label = \"Select one or more variables to cluster\", choices = vars, \n                selected = state_multvar(\"varCMeans\", vars), multiple = TRUE, selectize = FALSE)\n})\n\n#tampilan summary hasil analisis\noutput$cMeansSummary <- renderUI({\n  list(\n    helpText(\"Clustering is an effort to classify similar objects in the same groups. Cluster analysis constructs\", \n             strong(\"good cluster\"), \"when the members of a cluster have a\", strong(\"high degree of similarity\"),\n             \"of each other (internal homogeneity) and are not like members of each other clusters (external homogeneity).\", br(), br(),\n             strong(\"SUMMARY OF FUZZY C-MEANS CLUSTER ANALYSIS :\"), br()\n    ),\n    \n    fluidRow(\n      column(width=6,\n             helpText(strong(\"CLUSTER MEMBERSHIP\"), \" is a table containing clusters in which each observation is included.\",\n                          \"See view options to manage the number of observations to view\"),\n             tableOutput(\"membershipTable\")\n        ),\n      column(width=6,\n             helpText(strong(\"PARTITION MATRIX\"), \" is a table containing cluster membership for each observation in each cluster.\",\n                      \"See view options to manage the number of observations to view\"),\n             tableOutput(\"partitionTable\")\n             \n      )),\n    br(),br(),\n    fluidRow(\n      column(width=6),\n      column(width=6,\n             helpText(strong(\"Center of each cluster:\")),\n             tableOutput(\"centerClusTable\"), br(),\n             helpText(strong(\"Observation per cluster:\")),\n             tableOutput(\"jumlahPerCluster\"), br(),\n             helpText(strong(\"Number of iteration: \")),\n             textOutput(\"jumlahIterasi\"),\n             br(), br()\n             )\n      )\n    )\n})\n\noutput$cMeansPlot <- renderUI({\n  list(\n    helpText(\"Display the clustering results as a\", strong(\"plot\"), \"for fuzzy c-means clustering.\"),\n    helpText(\"Choose Plot:\"),\n    selectInput(\"cMeansPlotType\", label = \"\", choices = c(\"Scatterplot\"=\"Plot 1\",\"Discriminant Projection Plot\"=\"Plot 2\",\"Bivariate Cluster Plot\"=\"Plot 3\"), selected = \"Plot 1\", multiple = FALSE),\n    uiOutput(\"cMeansPlotFunction\")\n    )\n})\n\n#FUNGSI-FUNGSI SHINY\n\n#mengambil data\ngetData <- reactive({\n  theData <- getdata()\n  theData <- theData[,as.character(input$varCMeans)]\n  return(theData)\n})\n\n#mengambil faktor\ngetFactorCMeans <- function(){\n  isFac <- \"factor\" == getdata_class() | \"character\" == getdata_class()\n  vars <- varnames()[isFac]\n  if(length(vars) == 0) return(NULL)\n  else{\n    theFactor <- getdata()\n    theFactor <- theFactor[,as.character(input$facCMeans)]\n    return(as.matrix(theFactor))\n  }\n}\n\n#memanggil fungsi utama fuzzy c-means\ndoClustCMeans <- reactive({\n  data <- getData()\n  maxIter <- varCMeansmaxIter()\n  errorTolerance <- varCMeanserrTolerance()\n  jumlahCluster <- varCMeansjumlahCluster()\n  pangkat <- varCMeanspangkat()\n  \n  listHasil <- runCluster(data, maxIter, errorTolerance, jumlahCluster, pangkat)\n  \n  return(listHasil)\n})\n\n#error handling\nvarCMeansmaxIter <- function(){\n  iter <- input$varCMeans_maxIter\n  if(iter < 1 || iter%%1!=0 || is.na(input$varCMeans_maxIter)){\n    iter <- 100\n    updateNumericInput(session, \"varCMeans_maxIter\", value = 100)\n  }\n  return(iter)\n}\n\nvarCMeanserrTolerance <- function(){\n  errTol <- input$varCMeans_errTolerance\n  if(errTol < 0 || is.na(input$varCMeans_errTolerance)){\n    errTol <- 0.0000006\n    updateNumericInput(session, \"varCMeans_errTolerance\", value = 0.0000006)\n  }\n  return(errTol)\n}\n\nvarCMeansjumlahCluster <- function(){\n  jumClus <- input$varCMeans_jumlahCluster\n  jumData <- nrow(as.matrix(getData()))\n  if(jumClus < 1 || jumClus > jumData || is.na(input$varCMeans_jumlahCluster)){\n    jumClus <- 2\n    updateNumericInput(session, \"varCMeans_jumlahCluster\", value = 2)\n  }\n  return(jumClus)\n}\n\nvarCMeanspangkat <- function(){\n  pangkat <- input$varCMeans_pangkat\n  if(pangkat < 2 || is.na(input$varCMeans_pangkat)){\n    pangkat <- 2\n    updateNumericInput(session, \"varCMeans_pangkat\", value = 2)\n  }\n  return(pangkat)\n}\n\n#tabel membership\noutput$membershipTable <- renderTable({\n  if(length(input$varCMeans)<1 || is.null(doClustCMeans())){\n    return()\n  }\n  memb <- matrix(doClustCMeans()$membership, ncol = 1)\n  obs <- seq(from = 1, to = nrow(memb))\n  if(!is.null(getFactorCMeans())){\n    faktor <- getFactorCMeans()\n    membTable <- cbind(faktor, memb)\n    colnames(membTable) <- c(\"Faktor\",\"Cluster Membership\")\n  }\n  else{\n    membTable <- cbind(obs, memb)\n    colnames(membTable) <- c(\"#Observation\", \"Cluster Membership\")\n  }\n  return(head(membTable, n = input$viewCM))\n})\n\n#tabel matriks partisi\noutput$partitionTable <- renderTable({\n  if(length(input$varCMeans)<1 || is.null(doClustCMeans())){\n    return()\n  }\n  partisi <- matrix(doClustCMeans()$matriksPartisi, ncol = input$varCMeans_jumlahCluster)\n  obs <- seq(from = 1, to = nrow(partisi))\n  #partisiTable <- cbind(obs, partisi)\n  partisiTable <- partisi\n  colnames(partisiTable) <- paste(\"Cluster\", c(1:ncol(partisi)), sep = \" \")\n  return(head(partisiTable, n = input$viewCM))\n})\n\n#tabel pusat cluster\noutput$centerClusTable <- renderTable({\n  if(length(input$varCMeans)<1 || is.null(doClustCMeans())){\n    return()\n  }\n  pusat <- matrix(doClustCMeans()$matriksPusatCluster, nrow = input$varCMeans_jumlahCluster, ncol=length(input$varCMeans))\n  rownames(pusat) <- paste(\"Cluster\", c(1:nrow(pusat)), sep = \" \")\n  colnames(pusat) <- as.character(input$varCMeans)\n  return(t(pusat))\n})\n\n#jumlah iterasi\noutput$jumlahIterasi <- renderText({\n  if(length(input$varCMeans)<1 || is.null(doClustCMeans())){\n    return()\n  }\n  iter <- doClustCMeans()$iterasi\n  return(iter)\n})\n\noutput$jumlahPerCluster <- renderTable({\n  if(length(input$varCMeans)<1 || is.null(doClustCMeans())){\n    return()\n  }\n  memb <- matrix(doClustCMeans()$membership, ncol = 1)\n  jumPerClus <- as.data.frame(table(memb))\n  colnames(jumPerClus) <- c(\"Cluster\", \"Freq\")\n  return(jumPerClus)\n})\n\n#switching plot\noutput$cMeansPlotFunction <- renderUI({\n  if(length(input$varCMeans)<1 || is.null(input$varCMeans) || is.null(doClustCMeans())){\n    return()\n  } \n  else if(input$cMeansPlotType == \"Plot 1\"){\n    return(plotOutput(\"plotCMeans1\"))\n  }\n  else if(input$cMeansPlotType == \"Plot 2\"){\n    return(plotOutput(\"plotCMeans2\"))\n  }\n  else if(input$cMeansPlotType == \"Plot 3\"){\n    return(plotOutput(\"plotCMeans3\"))\n  }\n  else{\n    return()\n  }\n})\n\n#plot 1\noutput$plotCMeans1 <- renderPlot({\n  plotCM1()\n})\n\n#plot 2\noutput$plotCMeans2 <- renderPlot({\n  plotCM2()\n})\n\n#plot 3\noutput$plotCMeans3 <- renderPlot({\n  plotCM3()\n})\n\nplotCM1 <- function(){\n  data <- getData()\n  memb <- doClustCMeans()$membership\n  pusat <- doClustCMeans()$matriksPusatCluster\n  pairs(data, col=c(1:nrow(pusat))[memb])\n}\n\n#plot 2\nplotCM2 <- function(){\n  data <- getData()\n  memb <- doClustCMeans()$membership\n  library(fpc)\n  plotcluster(data, memb)\n}\n\n#plot 3\nplotCM3 <- function(){\n  data <- getData()\n  data <- as.data.frame(data)\n  memb <- doClustCMeans()$membership\n  clusplot(data, memb, color=TRUE, shade=TRUE, labels=2, lines=0)\n}\n\n#FUNGSI-FUNGSI DOWNLOAD REPORT\n\nhasilDataAwal <- function(){\n  data <- getData()\n  return(data)\n}\n\nhasilCluster <- function(){\n  memb <- matrix(doClustCMeans()$membership, ncol = 1)\n  obs <- seq(from = 1, to = nrow(memb))\n  if(!is.null(getFactorCMeans())){\n    faktor <- getFactorCMeans()\n    membTable <- cbind(faktor, memb)\n    colnames(membTable) <- c(\"Faktor\",\"Cluster Membership\")\n  }\n  else{\n    membTable <- cbind(obs, memb)\n    colnames(membTable) <- c(\"#Observation\", \"Cluster Membership\")\n  }\n  return(membTable)\n}\n\nhasilMatriksPartisi <- function(){\n  partisi <- matrix(doClustCMeans()$matriksPartisi, ncol = input$varCMeans_jumlahCluster)\n  obs <- seq(from = 1, to = nrow(partisi))\n  partisiTable <- partisi\n  colnames(partisiTable) <- paste(\"Cluster\", c(1:ncol(partisi)), sep = \" \")\n  return(partisiTable)\n}\n\nhasilPusatCluster <- function(){\n  pusat <- matrix(doClustCMeans()$matriksPusatCluster, nrow = input$varCMeans_jumlahCluster, ncol=length(input$varCMeans))\n  rownames(pusat) <- paste(\"Cluster\", c(1:nrow(pusat)), sep = \" \")\n  colnames(pusat) <- paste(\"Var\", c(1:ncol(pusat)), sep = \" \")\n  return(pusat)\n}\n\nhasilPerCluster <- function(){\n  memb <- matrix(doClustCMeans()$membership, ncol = 1)\n  jumPerClus <- as.matrix(count(memb))\n  colnames(jumPerClus) <- c(\"Cluster\", \"Member\")\n  return(jumPerClus)\n}\n\n#download report\noutput$downloadReportFCM <- downloadHandler(\n  filename = function() {\n    paste('Clustering Report', sep = '.', switch(\n      input$formatFCM, PDF = 'pdf', HTML = 'html', Word = 'docx'\n    ))\n  },\n  \n  content = function(file) {\n    src <- normalizePath('fcm-report.Rmd')\n    \n    # temporarily switch to the temp dir, in case you do not have write\n    # permission to the current working directory\n    owd <- setwd(tempdir())\n    on.exit(setwd(owd))\n    file.copy(src, 'fcm-report.Rmd')\n    \n    library(rmarkdown)\n    out <- render('fcm-report.Rmd', switch(\n      input$formatFCM,\n      PDF = pdf_document(), HTML = html_document(), Word = word_document()\n    ))\n    print(out)\n    print(file)\n    file.rename(out, file)\n  }\n)\n\n#fungsi fungsi share plot\n\nimageFCM <-function(){\n  #dev.new()\n  namafile <- SHAREfile_names()\n  direktori<-paste0(\"C:/Apache2/htdocs/fast/images/image/image\",namafile,\".png\")\n  direktori2 <- paste0(\"image/image\",namafile,\".png\")\n  png(direktori, type=\"cairo\")  \n  cMeansPlotFunctionShare()\n  dev.off()\n  inserttodbfcm(direktori2)\n}\n\ninserttodbfcm <- function(direktori = null){\n  query<- paste0(\"INSERT INTO data VALUES(null,'\",input$titleFCM,\"','\",input$authorFCM,\"','\",input$categoryFCM,\"','\",input$summaryFCM,\"','\",direktori,\"')\")\n  dbGetQuery(mydb, query)\n}\n\n#event observer untuk sharing button\nobserveEvent(input$shareClusCM,{\n  imageFCM()\n  createAlert(session, \"modalAlert2\", alertId = \"suksesAlert2\", title = \"Success\", content = NULL, style = \"success\")\n  Sys.sleep(2)\n  toggleModal2(session, \"moClusCM\", toggle=\"close\")\n  #bsAlert(\"alertBerhasil\")\n})\n\ncMeansPlotFunctionShare <- function(){\n  if(input$cMeansPlotTypeShare == \"Plot 1\"){\n    thePlot <- plotCM1()\n  }\n  else if(input$cMeansPlotTypeShare == \"Plot 2\"){\n    thePlot <- plotCM2()\n  }\n  else{\n    thePlot <- plotCM3()\n  }\n  return(thePlot)\n}\n\noutput$cMeansPlotFunctionShareUI <- renderPlot({\n  thePlot <- cMeansPlotFunctionShare()\n  return(thePlot)\n})\n\n############SHARE KE FORUM###############\n######################################\n\n#event observer sharing ke forum button\nobserveEvent(input$shareClusCMForum, {\n  postToForumFCM()\n})\n\n#capturer per output\ngetHasilClusterShareForum <- function(){\n  stre <- getFromCapture(hasilCluster())\n  HTML(paste(\"<pre style=\\\"width:400px; min-width:50px\\\">\",stre,\"</pre>\"))\n}\n\ngetMatriksPartisiShareForum <- function(){\n  stre <- getFromCapture(hasilMatriksPartisi())\n  HTML(paste(\"<pre style=\\\"width:500px; min-width:50px\\\">\",stre,\"</pre>\"))\n}\n\ngetPusatClusterShareForum <- function(){\n  stre <- getFromCapture(t(hasilPusatCluster()))\n  HTML(paste(\"<pre style=\\\"width:300px; min-width:50px\\\">\",stre,\"</pre>\"))\n}\n\ngetObsPerClusterShareForum <- function(){\n  stre <- getFromCapture(hasilPerCluster())\n  HTML(paste(\"<pre style=\\\"width:300px; min-width:50px\\\">\",stre,\"</pre>\"))\n}\n\ngetContentToPostFCM <- function(direktori, direktori2, direktori3){\n  stre <- paste0(\"<p>\",input$summaryFCMForum,\"</p>\",\n                 getHasilClusterShareForum(),\n                 \"<br/><img src=\",direktori,\"></img>\",\n                 \"<br/><img src=\",direktori2,\"></img>\",\n                 \"<br/><img src=\",direktori3,\"></img>\",\n                 getMatriksPartisiShareForum(),\n                 getPusatClusterShareForum(),\n                 getObsPerClusterShareForum())\n  return(stre)\n}\n\n#query insert post ke forum\npostToForumFCM <- function(){\n  tryCatch(postToForumFCMFunction(), error = function(e) idTidakDitemukan())\n}\n\n#kondisi benar\npostToForumFCMFunction <- function(){\n  idForum <- 21\n  theUID <- getUserIDFromDB(input$usernameFCMForum, input$passwordFCMForum)\n  thepostID <- getLastPostID()\n  theTopicID <- getTopicID()\n  theNumPosts <- getNumPosts(idForum)\n  theNumTopics <- getNumTopics(idForum)\n  thePostCount <- getPostCount(theUID)\n  #set image\n  #dev.new()\n  namafile <- SHAREfile_names()\n  direktori<-paste0(\"C:/Apache2/htdocs/fast/fileman/Uploads/Himage\",namafile,\".png\")\n  direktori2 <- paste0(\"/fast/fileman/Uploads/Himage\",namafile,\".png\")\n  direktori3 <- paste0(\"/fast/fileman/Uploads/banner-analisis.png\")\n  png(direktori, type=\"cairo\")\n  plotCM1()\n  dev.off()\n  namafile2 <- SHAREfile_names()\n  direktori4<-paste0(\"C:/Apache2/htdocs/fast/fileman/Uploads/Himage\",namafile2,\".png\")\n  direktori42 <- paste0(\"/fast/fileman/Uploads/Himage\",namafile2,\".png\")\n  png(direktori4, type=\"cairo\")\n  plotCM2()\n  dev.off()\n  namafile3 <- SHAREfile_names()\n  direktori5<-paste0(\"C:/Apache2/htdocs/fast/fileman/Uploads/Himage\",namafile3,\".png\")\n  direktori52 <- paste0(\"/fast/fileman/Uploads/Himage\",namafile3,\".png\")\n  png(direktori5, type=\"cairo\")\n  plotCM3()\n  dev.off()\n  #insert topic\n  queryCreateTopic <- createTopic(theTopicID, idForum, theUID, input$subjectFCMForum, direktori3, thepostID)\n  dbGetQuery(mydb, queryCreateTopic)\n  #insert post\n  queryPostContent <- postContent(thepostID, input$subjectFCMForum, getContentToPostFCM(direktori2, direktori42, direktori52), input$summaryFCMForum, theUID, theTopicID, idForum)\n  dbGetQuery(mydb, queryPostContent)\n  #update forum\n  queryUpdateForum <- updateForum(theNumPosts, theNumTopics, thepostID, idForum)\n  dbGetQuery(mydb, queryUpdateForum)\n  #insert log topic\n  queryLogTopic <- logTopic(theUID, theTopicID, idForum, thepostID)\n  dbGetQuery(mydb, queryLogTopic)\n  #update post member\n  queryUpdatePostCount <- updatePostCount(thePostCount, theUID)\n  dbGetQuery(mydb, queryUpdatePostCount)\n  #alert sukses dan tutup modal\n  createAlert(session, \"modalAlert\", alertId = \"suksesAlert\", title = \"Success\", content = NULL, style = \"success\")\n  Sys.sleep(2)\n  toggleModal2(session, \"moClusCMForum\", toggle=\"close\")\n}\n\n\n###FUNGSI FUZZY C-MEANS\n###FIX - JANGAN DIUBAH\n#######################\n\n#memanggil fungsi utama\nrunCluster <- function(data, maxIter, errorTolerance, jumlahCluster, pangkat){\n  data <- as.matrix(data)\n  \n  #matriks partisi inisiasi random\n  matriksPartisi <- partisiAwal(nrow(data), jumlahCluster)\n  #inisiasi parameter\n  param <- list(matriksPartisi=matriksPartisi, pangkat=pangkat, \n                jumlahCluster = jumlahCluster, data=data)\n  \n  #iterasi maksimum sebanyak maxIter\n  for(i in 1:maxIter){\n    doClust <- doClusteringFCM(param)\n    if(abs(max(doClust$matriksPartisi - doClust$matriksPartisiBaru)) < errorTolerance){\n      param$matriksPartisi <- doClust$matriksPartisiBaru\n      param$matriksPusatCluster <- doClust$matriksPusatCluster\n      param$iterasi <- i\n      break\n    }\n    else{\n      param$matriksPartisi <- doClust$matriksPartisiBaru\n      param$matriksPusatCluster <- doClust$matriksPusatCluster\n      param$iterasi <- i\n    }\n  }\n  \n  param$membership <- apply(param$matriksPartisi, 1, which.max)\n  \n  return(param)  \n}\n\n#fungsi clustering yang diiterasi\ndoClusteringFCM <- function(param = list()){\n  #insiasi nilai-nilai awal parameter\n  data <- param$data\n  pangkat <- param$pangkat\n  jumlahCluster <- param$jumlahCluster\n  matriksPartisi <- param$matriksPartisi\n  \n  #hitung pusat cluster\n  #inisiasi matriksi pusat cluster\n  matriksPusatCluster <- matrix(NA, ncol = ncol(data), nrow = ncol(matriksPartisi))\n  matriksMiu2 <- matriksPartisi^pangkat\n  #iterasi sebanyak jumlah cluster\n  for(i in 1:ncol(matriksPartisi)){\n    for(j in 1:ncol(data)){\n      matriksPusatCluster[i,j] <- (sum((matriksMiu2[,i])*data[,j]))/(sum(matriksMiu2[,i]))\n    }\n  }\n  \n  #perbaiki matriks partisi\n  matriksPembilang <- matrix(NA, ncol = ncol(matriksPartisi), nrow = nrow(data))\n  for(i in 1:nrow(matriksPembilang)){\n    for(j in 1:ncol(matriksPembilang)){\n      jarak <- 0\n      for(k in 1:ncol(data)){\n        jarak <- jarak + (data[i,k]-matriksPusatCluster[j,k])^2\n      }\n      matriksPembilang[i,j] <- jarak^(-1/(pangkat-1))\n    }\n  }\n  \n  #inisiasi matriks partisi baru\n  matriksPartisiBaru <- matrix(NA, ncol = ncol(matriksPartisi), nrow = nrow(matriksPartisi))\n  \n  #matriks penyebut untuk membagi matriks partisi baru\n  penyebut <- matrix(apply(matriksPembilang, 1, sum), ncol=1)\n  #bagi tiap baris matriks partisi baru dengan penyebut\n  for(i in 1:nrow(matriksPembilang)){\n    for(j in 1:ncol(matriksPembilang)){\n      matriksPartisiBaru[i,j] <- matriksPembilang[i,j]/penyebut[i,1]\n    }\n  }\n  \n  param$matriksPartisiBaru <- matriksPartisiBaru\n  param$matriksPusatCluster <- matriksPusatCluster\n\n  return(invisible(param))\n}\n\n\n#matriks partisi acak untuk inisiasi\npartisiAwal <- function(jumlahSampel, jumlahCluster) {\n  #inisiasi matriks U dengan row = jumlah sampel dan col = jumlah cluster\n  matriksU <- matrix(NA, nrow = jumlahSampel, ncol = jumlahCluster)\n  #isikan nilai random pada matriks U\n  for(i in 1:jumlahCluster){\n    col <- sample(1:100, jumlahSampel, replace = TRUE)\n    matriksU[,i] <- col\n  }\n  #buat pembagi untuk membagi nilai matriks U agar totalnya 1\n  pembagi <- matrix(apply(matriksU, 1, sum), ncol = 1)\n  #bagi tiap baris matriks U dengan pembagi\n  for(i in 1:nrow(matriksU)){\n    for(j in 1:ncol(matriksU)){\n      matriksU[i,j] <- matriksU[i,j]/pembagi[i,1]\n    }\n  }\n  return(matriksU)\n}",
    "created" : 1469799538198.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3588072370",
    "id" : "AC58E6FA",
    "lastKnownWriteTime" : 1466246715,
    "last_content_update" : 1466246715,
    "path" : "E:/Coding/R/FAST/Dari Server (Analysis Only)/fast-beta/tools/analysis/fuzzyCMeans.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}