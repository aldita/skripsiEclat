{
    "collab_server" : "",
    "contents" : "upload<-reactive({\n  getdata()\n})\n\noutput$abc <- renderUI({\n  variable <- upload()\n  \n  sidebarLayout(\n    sidebarPanel(\n      wellPanel(\n        HTML(paste(\"<label><strong>Menu:\", \"Soft Computing\",\"</strong></label>\")),\n        HTML(paste(\"<label><strong>Tool:\",isolate(input$nav_fast),\"</strong></label>\")),\n        HTML(paste(\"<label><strong>Data:\",isolate(input$datasets),\"</strong></label>\"))\n      ),\n      \n      uiOutput(\"sideBarAbc\"),\n      helpAndReport('Fuzzy Geographically Weighted Clustering','fgwc', inclMD(\"tools/help/fgwc.md\"))\n      \n    ),\n    mainPanel(\n              \n              tabsetPanel(\n        id = \"tabAbc\",\n        tabPanel(\n          div(class = \"busy\",\n              p(\"Calculation in progress ...\"),\n              img(src=\"/ajaxloaderq.gif\")),\n          title = \"Summary\",           \n          conditionalPanel(condition = \"input.cekpetaAbc\",\n                           div(style=\"background:#bcded7;margin-top:15px;padding-top:10px;padding-bottom:5px;\n                               -webkit-border-radius: 12px;-moz-border-radius: 7px;border-radius: 7px;padding-left:20px;padding-right:20px;\",\n                               HTML(\"<center>Clustering Result in Map</center>\")\n                           ),\n                           HTML(\"<center>\"),\n                           plotOutput(\"showPeta\",height = \"400px\"),\n                           HTML(\"</center>\")\n                           \n          ), \n          bsCollapse(multiple = TRUE, id = \"resultAbc\", open = 1,\n                     bsCollapsePanel(\"Membership\", \n                                     div(style=\"background:#A2DED0;margin-top:2px;margin-left:1px;margin-right:1px;margin-bottom:1px;padding-top:10px;padding-bottom:5px;\n                               -webkit-border-radius: 12px;-moz-border-radius: 7px;border-radius: 7px;padding-left:20px;padding-right:20px;\",\n                                      HTML(\"<center><strong>CLUSTER MEMBERSHIP</strong></center><br>Cluster membership is a table containing clusters in wich each observation is included.\"),\n                                      div(style=\"background:white;margin-top:3px;padding-left:10px;padding-right:10px;padding-top:10px;padding-bottom:10px;-webkit-border-radius: 12px;-moz-border-radius: 7px;border-radius: 7px;\",\n                                          dataTableOutput(\"showMember\"),id=\"mbuh\"),\n                                     value= \"memb\")\n                     ),\n                     bsCollapsePanel(\"Cluster Center\", div(style=\"background:#A2DED0;margin-top:2px;margin-left:1px;margin-right:1px;margin-bottom:1px;padding-top:10px;padding-bottom:5px;\n                               -webkit-border-radius: 12px;-moz-border-radius: 7px;border-radius: 7px;padding-left:20px;padding-right:20px;\",\n                                                           \n                                                           div(style=\"background:white;margin-top:3px;padding-left:10px;padding-right:10px;padding-top:10px;padding-bottom:10px;-webkit-border-radius: 12px;-moz-border-radius: 7px;border-radius: 7px;\",\n                                                               dataTableOutput(\"showCentro\"),id=\"mbu\")\n                                                           ),\n                                     value = \"centr\"),\n                     \n                     bsCollapsePanel(title = \"Evaluation Index\", \n                                     tableOutput(\"showIndeks\"),\n                                     value = 1)\n          ),\n          \n          #                                     \n          \n          value = 71\n          ),\n        tabPanel(\n          div(class = \"busy\", p(\"Calculation in progress ...\"),\n              img(src=\"/ajaxloaderq.gif\")),\n          title = \"Plot\",\n          tabsetPanel(\n            id = \"subtabplotAbc\",\n            tabPanel(\n              title = \"Cluster Center Plot\",\n              helpText(\"Comparing your cluster center result.\"),\n              plotOutput(\"plotCC\"),\n              value=20\n            ),\n            tabPanel(\n              title = \"Cluster Plot in variable\",\n              helpText(\"Display cluster result in variabel dimension.\"),\n              plotOutput(\"plotScree\"),\n              value=21\n            ),\n            tabPanel(div(class = \"busy\", p(\"Calculation in progress ...\"),\n                         img(src=\"/ajaxloaderq.gif\")),\n              title = \"Mapping Variabel\",\n              helpText(\"Display your variable in map.\"),\n              plotOutput(\"varMap\"),\n              value=22\n              )\n            ),\n          \n          value=72\n        )\n        \n      )\n      \n    ))\n  \n})\n\n##################   OUTPUT    ############\noutput$varMap<-renderPlot({\n  return(varPeta())\n  print(\"masuk output\")\n})\nvarPeta<- reactive({\n  library(rgdal)\n  library(ggplot2)\n  \n  myshape<- input$shpPeta\n  if (is.null(myshape)) \n    return(NULL)       \n  \n  dir<-dirname(myshape[1,4])\n  \n  for ( i in 1:nrow(myshape)) {file.rename(myshape[i,4], paste0(dir,\"/\",myshape[i,1]))}\n  temp<-myshape[1,1]\n  filename<-substr(temp, 1, nchar(temp)-4)\n  \n muni<- readOGR(dsn = dir, filename)\n muni@data$id <- as.numeric(rownames(muni@data))+1\n centroid<-as.data.frame(coordinates(muni))\n \n names(centroid) <- c(\"long\",\"lat\")\n dat <- data.frame(id=muni@data$id, value = getdata()[,input$varplot],centroid,nam=muni@data[,\"KAB_KOTA\"])\n \n#  dat <- data.frame(id=muni@data$id, value = data[1:35,2],centroid,nam=muni@data[,\"KAB_KOTA\"])\n muni.df <- fortify(muni,region = \"id\")\n Map <- ggplot(dat, aes(map_id=id))\n # Map <- Map+ scale_fill_manual(values=c('1'='#FFA500', '2'='#DDA0DD', '3'='#FFC0CB',\n #                                        '4'='#B0E0E6', '5'='#008080', '6'='#708090', '7'='red', '8'='#FFA072'))\n Map <- Map + scale_fill_gradient(low = \"#ffffcc\", high = \"#ff4444\", \n                                  space = \"Lab\", na.value = \"grey50\",\n                                  guide = \"colourbar\")\n Map <- Map+ geom_map(aes(fill=value),map=muni.df,colour='grey23')\n Map <- Map+ coord_equal()\n Map <- Map+ geom_text(aes(x=long, y=lat, label = nam), size=3,color=\"white\")\n Map <- Map+ expand_limits(x=muni.df$long, y=muni.df$lat)\n Map <- Map+ theme_bw()\n Map <- Map+ labs(x = \"longitude\", y = \"latittude\")+ggtitle(paste(\"variable \",input$varPlot,\" map\",sep=\"\"))\n Map\n \n#dapet data variabel\n#kal@data$id <- as.numeric(rownames(kal@data))+1\n# dat <- data.frame(id=muni@data$id, value = getdata()[,input$varplot],centroid,nam=muni@data[,\"KAB_KOTA\"])\n# data<-data.frame(id=muni@data$id,Pop=getdata()[,input$varplot])\n\n# muni@data$id <- rownames(muni@data)\n# muni.df <- fortify(muni)\n# muni.df <- join(muni.df, muni@data, by=\"id\")\n# muni.df <- merge(muni.df, data, by.x=\"id\", by.y=\"id\", all.x=T, a..ly=F)\n# # read municipality polygons\n# \n# # fortify and merge: muni.df is used in ggplot\n# \n# # create the map layers\n# centroid<-as.data.frame(coordinates(muni))\n# muni.df<-data.frame(muni.df, centroid)\n# names(centroid) <- c(\"long\",\"lat\")\n# print(\"masuk\")\n# # dat <- data.frame(id=muni@data$id, cluster = a,centroid,data)\n# # ggp <- ggplot(dat, aes(map_id=id))\n# \n# ggp <- ggplot(data=muni.df, aes(x=long, y=lat, group=group)) \n# ggp <- ggp + geom_polygon(aes(x=long, y=lat,fill=Pop))\n# ggp <- ggp + geom_path(color=\"grey\", linestyle=2)  # draw boundaries\n# ggp <- ggp + coord_equal() \n# ggp <- ggp + scale_fill_gradient(low = \"#ffffcc\", high = \"#ff4444\", \n#                                  space = \"Lab\", na.value = \"grey50\",\n#                                  guide = \"colourbar\")\n# ggp <- ggp + labs(title=\"VARIABLE MAP\")\nreturn(Map)\n\n})\nscp<-reactive({\n#   cc<-array(input$varPlotF)\n  if(is.null(input$varPlotF)){\n    if(is.null(input$varAbc)){return()\n    }else{\n      plot<-plot(getdata()[,input$varAbc], col = hasil())\n    }\n  }else{\n    #     plot(getdata()[,input$varAbc], col = hasil())\n    data<-getdata()[,input$varPlotF]\n    plot<-ggplot(data, aes(x=data[,1],y=data[,2],color=hasil())) + geom_point()\n  }\n  return(plot)\n})\noutput$plotScree<-renderPlot({\n  scp()\n})\n\noutput$plotCC<-renderPlot({\n  cc<-showCentro()\nsource(\"http://pcwww.liv.ac.uk/~william/Geodemographic%20Classifiability/func%20CreateRadialPlot.r\")\nplot<-CreateRadialPlot(cc, plot.extent.x = 1.5, grid.min = -0.4, centre.y = -0.5, \n                 label.centre.y = TRUE, label.gridline.min = FALSE)\nreturn(plot)\n})\noutput$dataa <- renderDataTable({\n  \n  data<-getdata()[,input$varAbc]\n  print(input$varAbc)\n  return(data)\n}, options = list(bSortClasses = TRUE, bCaseInsensitive = TRUE, \n                  aLengthMenu = c(5,20,50,100), iDisplayLength = 5))\n\noutput$sideBarAbc <- renderUI({\n  isNum <- \"numeric\" == getdata_class() | \"integer\" == getdata_class()\n  vars <- varnames()[isNum]\n  if(length(vars) == 0) return()\n  data<-getdata()\n  list(\n                     \n                     conditionalPanel(condition = \"input.tabAbc == 71 \",\n                                      bsCollapse(multiple = FALSE, open = \"cp\", id = \"collapseee1\",\n                                                 bsCollapsePanel(\"Cluster Properties\",\n                                                                 \n                                                                 selectInput(\"varAbc\", 'Select variables :', vars, multiple=TRUE, selectize=FALSE),     \n                                                                 selectInput(inputId = \"methode\",label = \"Method :\",\n                                                                             choices = list( \"None\"=0,\"FCM\"=1,\"FGWC\"=2,\"FGWC-SA\"=3,\"FGWC-ABC\"=4),\n                                                                             selected=1),\n#                                                               \n                                                                 numericInput(\"c\", \"Cluster count :\", 2),\n                                                                div(style=\"background:#bcded7;margin-top:2px;padding-top:10px;margin-bottom:5px;padding-bottom:5px;\n                                                                                                                                                                       -webkit-border-radius: 12px;-moz-border-radius: 7px;border-radius: 7px;padding-left:20px;padding-right:20px;\",\n                                                                    checkboxInput(inputId = \"cekpetaAbc\", label= \"Use Shapefiles\", value = FALSE ),\n                                                                    \n                                                                    conditionalPanel(condition=\"input.cekpetaAbc\",\n                                                                                     fileInput(\"shpPeta\",\"\", multiple=T))\n                                                                ),                \n                                                                                 \n                                                                                  \n                                                                \n                                                                 conditionalPanel(condition=\"input.methode!=1\",wellPanel(\n                                                                   radioButtons(label = \"Upload Populaton and Distance\", inputId = \"format\", choices = c(\".csv\",\".xlsx\"),selected = \".xlsx\", inline =TRUE),\n                                                                   #                         checkboxInput(inputId = \"popHead\",label = \"csv\",value = FALSE),\n                                                                   fileInput(\"pop\",helpText(\"Upload Population Data\"), multiple=F),\n                                                                   fileInput(\"dist\",helpText(\"Upload Distance Data\"), multiple=F)\n                                                                   \n                                                                 ),\n                                                                 id=\"distanceBcoll\"\n                                                                 ),\n                                                                 value = \"cp\"),\n                                                 \n                                                 bsCollapsePanel(\"Set Parameter\",\n                                                                 radioButtons(inputId = \"inputDef\", label =\"\", choices = c(\"Default\",\"Custom\"),selected = \"Default\", inline =TRUE),\n                                                                 conditionalPanel(condition = \"input.inputDef=='Custom'\",\n                                                                                  numericInput(\"m\", \"Fuzzifier :\", 1.5,step=0.5),\n                                                                                  numericInput(\"alfa\", \"Alfa:\", 0.5,max=1,min=0),\n                                                                                  numericInput(\"beta\", \"Beta:\", 0.5,max=1,min=0),\n                                                                                  numericInput(\"a\", \"a:\", 1),\n                                                                                  numericInput(\"b\", \"b:\", 1),\n                                                                                  numericInput(\"e\", \"Threshold:\", 0.0001),\n#                                                                                   conditionalPanel(condition = \"input.METH==12\",\n                                                                                  numericInput(\"max\", \"Maxcycle :\", 100),\n                                                                                  numericInput(\"limit\", \"Limit :\", 5)         \n#                                                                                   )\n                                                                                  \n                                                                 ),\n                                                                 helpText(\"see the result on 'Result' tab\"),\n                                                                 \n                                                                 value=\"clustePar\")\n                                      ),\n                                      \n#                                 bsCollapsePanel(\"View Option\",\n#                                                 conditionalPanel(condition = \"input.tab == 1\",\n#                                                                  numericInput(\"tampilkan\", \"Choose number of observation to view in results \", 10, min = 1)\n#                                                 ),\n#                                                 \n#                                                 id=\"tampilan\"),\n#                                 \n                                \n                  #end Bcollapse\n                     div(style=\"background:none;margin-top:15px;padding-top:10px;padding-bottom:5px;\n                         -webkit-border-radius: 12px;-moz-border-radius: 7px;border-radius: 7px;padding-left:20px;padding-right:20px;\",\n                         radioButtons('formatAbc', 'Download Your Report', c('Word', 'PDF', 'HTML')),\n                         downloadButton('downloadResultAbc')\n                         \n                         \n                     )\n                     ),\n    conditionalPanel(condition = \"input.tabAbc == 72 \",\n                     conditionalPanel(condition = \"input.subtabplotAbc == 21 \",\n                                      selectInput(\"varPlotF\", 'Select variables :', vars, multiple=TRUE, selectize=FALSE)\n                                      ),\n                     conditionalPanel(condition = \"input.subtabplotAbc == 22 \",\n                                      conditionalPanel(condition = \"input.cekpetaAbc\",\n                                                       div(style=\"background:#bcded7;margin-top:5px;margin-bottom:5px;padding-top:10px;padding-bottom:5px;\n                         -webkit-border-radius: 12px;-moz-border-radius: 7px;border-radius: 7px;padding-left:20px;padding-right:20px;\",\n                                                           helpText(strong(\"You have upload shapefiles\"))\n                                                       ),id=\"panelcekpeta\"\n                                      ),    \n                                      \n                                                       div(style=\"background:#bcded7;margin-top:15px;padding-top:10px;margin-bottom:20px;padding-bottom:5px;\n                                                                     -webkit-border-radius: 12px;-moz-border-radius: 7px;border-radius: 7px;padding-left:20px;padding-right:20px;\",\n                                                           \n                                                           selectInput(\"varplot\", 'Select 1 variable to map :', vars, multiple=F, selectize=FALSE)\n                                                           \n                                                       )\n                                                       \n                     ),\n          \n          \n          div(style=\"background:none;margin-top:15px;padding-top:10px;padding-bottom:5px;\n                         -webkit-border-radius: 12px;-moz-border-radius: 7px;border-radius: 7px;padding-left:20px;padding-right:20px;\",\n              radioButtons('formatPlot', 'Download Your Report', c('Word', 'PDF', 'HTML')),\n              downloadButton('downloadPlot')\n              \n              \n          )\n          \n                    \n                    \n    )\n)\n  #   \n})\noutput$showPop <- renderDataTable({\n  popp()\n})\noutput$showDist <- renderDataTable({\n  viewDistance()\n})\noutput$showMember <- renderDataTable({\n  dataMembership()\n}, options = list(bSortClasses = TRUE, bCaseInsensitive = TRUE, \n                  aLengthMenu = c(10, 20, 50, 100),\n                  \n                  iDisplayLength = 5))\noutput$showCentro <- renderDataTable({\n  showCentro()\n})\nshowCentro<-reactive({\n  if(is.null(input$varAbc)){return()\n  }else{\n  value <- calculateAbc()\n  dat<-getdata()[,input$varAbc]\n  result<-value$centroid\n  colnames(result)<-names(dat)\n  roo<-as.matrix(rownames(result, do.NULL = FALSE, prefix = \"Cluster \"))\n  colnames(roo)<-\"Cluster\"\n  result<-cbind(roo,result)\n  return(result)\n  }\n})\noutput$showObjVal <- renderTable({\n  value <- calculateAbc()\n  return(value$objValue)\n})\noutput$showHasil <- renderTable({\n  value <- calculateAbc()\n  return(value$summ)\n})\noutput$showPeta <- renderPlot({\n  peta()\n})\noutput$dataMap<- renderDataTable({\n  hasil<-dataPeta()\n  return(hasil)\n}, options = list(bSortClasses = TRUE, bCaseInsensitive = TRUE, \n                  aLengthMenu = c(10, 20, 50, 100), iDisplayLength = 10))\noutput$showIndeks <- renderTable({\n  indeksAbc()\n})\n\n#################   REACTIVE   ############\nhasilAbc<-function(){\n  value <- calculateAbc()\n  dimm<-dim(value$membership)\n  n<-dimm[1]\n  result<-value$membership\n  c<-dimm[2]\n  \n  hasil<- matrix(0,nrow=n,ncol=1)\n  for(i in 1:n){\n    temp<-0\n    for(j in 1:c){\n      if(result[i,j]>temp) {\n        hasil[i,1]=as.character(j)\n        temp<-result[i,j]\n      }\n    }\n  }\n  \n  colnames(hasil)<-\"Cluster\"\n  return(hasil)\n}\n\ndataMembership <- reactive({\n  if(is.null(input$varAbc)){return()\n  }else{\n    value <- calculateAbc()\n    dimm<-dim(value$membership)\n    n<-dimm[1]\n    result<-value$membership\n    colnames(result)<-colnames(value$membership, do.NULL = FALSE, prefix = \"Membership Val Cluster \")\n    roo<-as.matrix(rownames(value$membership, do.NULL = FALSE, prefix = \"Object \"))\n    \n    c<-dimm[2]\n    \n    hasil<- matrix(0,nrow=n,ncol=1)\n    for(i in 1:n){\n      temp<-0\n      for(j in 1:c){\n        if(result[i,j]>temp) {\n          hasil[i,1]=paste(\"Cluster \",as.character(j),sep='')\n          temp<-result[i,j]\n        }\n      }\n    }\n    \n    colnames(hasil)<-\"Cluster\"\n    result<-cbind(roo,hasil,result)\n    \n    return(result)\n  }\n  \n})\ndataPeta <- reactive({\n  \n  #baca dbf peta\n  #   \n  library(rgdal)\n  library(ggplot2)\n  myshape<- input$shpPeta\n  if (is.null(myshape)) \n    return(NULL)       \n  \n  dir<-dirname(myshape[1,4])\n  \n  for ( i in 1:nrow(myshape)) {\n    file.rename(myshape[i,4], paste0(dir,\"/\",myshape[i,1]))}\n  temp<-myshape[1,1]\n  filename<-substr(temp, 1, nchar(temp)-4)\n  # getshp <- list.files(dir, pattern=\"*.shp\", full.names=TRUE)\n  \n  kal <- readOGR(dsn = dir, filename)\n  # kal<- readOGR(dsn=\"tools/spatial/peta/kalteng\",\"kalteng\")\n  #   print(kal@data)\n  kal@data$id <- rownames(kal@data)\n  #   print(kal@data)\n  value <- calculateAbc()\n  f<-value$membership\n  dimensi<-dim(f)\n  n<-dimensi[1]\n  c<-dimensi[2]\n  hasil<- matrix(0,nrow=n,ncol=1)\n  for(i in 1:n){\n    temp<-0\n    for(j in 1:c){\n      if(f[i,j]>temp) {\n        hasil[i,1]=as.character(j)\n        temp<-f[i,j]\n      }\n    }\n  }\n  \n  a<-hasil\n  #   a <- as.matrix(c('1','2','3','4','2','1','1','1','2','3','4','2','1','4'))\n  #   kal<- readOGR(dsn=\"tools/spatial/peta/kalteng\",\"kalteng\")\n  idd<- seq(1, length(rownames(kal@data)), 1)\n  data <- data.frame(ID=idd, cluster = a[,1], kal@data[,1:5])\n  return(data)\n})\nviewDistance <- reactive({\n  distan <- input$dist\n  distance <- read.xlsx(distan$datapath, sheetName = \"Sheet1\",  header = F)\n  distance <- as.matrix(distance)\n  return(distance)\n})\npopp <- reactive({\n  populasi <- input$pop\n  population <- read.xlsx(populasi$datapath, sheetName = \"Sheet1\", header = F)\n  population <- as.matrix(population)\n  return(population)\n})\npeta<-reactive({\n  library(rgdal)\n  library(ggplot2)\n  #   peta <- input$shpPeta\n  \n  #   myshape <- readOGR(dsn = \".\", \"london_sport\")\n  myshape<- input$shpPeta\n  if (is.null(myshape)) \n    return(NULL)       \n  \n  dir<-dirname(myshape[1,4])\n  \n  for ( i in 1:nrow(myshape)) {file.rename(myshape[i,4], paste0(dir,\"/\",myshape[i,1]))}\n  temp<-myshape[1,1]\n  filename<-substr(temp, 1, nchar(temp)-4)\n  \n  kal <- readOGR(dsn = dir, filename)\n  #   kal<- readOGR(dsn=\"tools/analysis/spatial/indonesia\",\"indo\")\n  #   print(kal@data)\n  kal@data$id <- as.numeric(rownames(kal@data))+1\n  #   print(kal@data)\n  value <- calculateAbc()\n  f<-value$membership\n  dimensi<-dim(f)\n  n<-dimensi[1]\n  c<-dimensi[2]\n  hasil<- matrix(0,nrow=n,ncol=1)\n  for(i in 1:n){\n    temp<-0\n    for(j in 1:c){\n      if(f[i,j]>temp) {\n        hasil[i,1]=as.character(j)\n        temp<-f[i,j]\n      }\n    }\n  }\n  \n  a<-hasil\n  #   a <- as.matrix(c('1','2','3','4','2','1','1','1','2','3','4','2','1','4'))\n  centroid<-as.data.frame(coordinates(kal))\n  \n  names(centroid) <- c(\"long\",\"lat\")\n  data <- data.frame(id=kal@data$id, cluster = a[,1],centroid)\n  kal.f <- fortify(kal, region = \"id\")\n  Map <- ggplot(data, aes(map_id=id))\n  Map <- Map+ scale_fill_manual(values=c('1'='#FFA500', '2'='#DDA0DD', '3'='#FFC0CB',\n                                         '4'='#B0E0E6', '5'='#008080', '6'='#708090', '7'='red', '8'='#FFA072'))\n  Map <- Map+ geom_map(aes(fill=cluster),map=kal.f,colour='grey23')\n  Map <- Map+ coord_equal()\n  Map <- Map+ geom_text(aes(x=long, y=lat, label = id), size=3,color=\"white\")\n  Map <- Map+ expand_limits(x=kal.f$long, y=kal.f$lat)\n  Map <- Map+ theme_bw()\n  Map <- Map+ labs(x = \"longitude\", y = \"latittude\")+ggtitle(paste(filename, sep=\" \"))\n  return(Map)\n})  \nindeksAbc<-reactive({\n  if(is.null(input$varAbc)){return()\n  }else{\n  source(paste(getwd(),\"/tools/analysis/spatial/Indeks final.R\", sep=''))\n  value <- calculateAbc()\n  result<-getIndeks(value$membership, value$centroid,getdata()[,input$varAbc],input$m)\n  array<-c(\"Partition Coeficient (PC)\",\"Classification Entropy (CE)\",\"Partition Index (SC)\",\n           \"Separation Index (S)\",\"Xie and Beni Index (XB)\",\" IFV Index (IFV)\")\n  \n  hasil<-data.frame(Index=array,Value=result)\n  return(hasil)\n  }\n})\ncalculateAbc <- reactive({\n  value<-getdata()[,input$varAbc]\n\n  dimensi <- dim(value)\n  n <- dimensi[1]\n  d <- dimensi[2]\n    # #   \n    data<-matrix(,nrow=n,ncol=d)\n    #convert data dari factor > character > numeric\n    new.value <- data.frame(lapply(value, as.character), stringsAsFactors=FALSE)\n    for(i in 1:n){\n      for(j in 1:d){\n        data[i,j] <- as.numeric(sub(\",\", \".\", new.value[i,j], fixed = TRUE))\n      }\n    }\n    data <- as.matrix(data)\n  if(input$methode!=1){\n    distan <- input$dist\n    distance <- read.xlsx(distan$datapath, sheetName = \"Sheet1\",  header = F)\n    distance <- as.matrix(distance)\n    \n    populasi <- input$pop\n    population <- read.xlsx(populasi$datapath, sheetName = \"Sheet1\", header = F)\n    population <- as.matrix(population)\n  }\n    \n  \n  m <- input$m\n  c <- input$c\n  alfa <- input$alfa\n  beta <- input$beta\n  e <- input$e\n  a <- input$a\n  b <- input$b\n    \n    if(input$methode==1){\n      source(paste(getwd(),\"/tools/analysis/spatial/runfgwc.R\", sep=''))\n      print(\"FCM\")\n      value <- fcm(data,alfa, beta, e, a, b, m, c)\n      result <- list(\"membership\" = value$membership, \"centroid\" = value$centroid, \"objValue\" = value$objVal)\n      return(result)\n    }else if(input$methode==2){\n      source(paste(getwd(),\"/tools/analysis/spatial/runfgwc.R\", sep=''))\n      print(\"FGWC\")\n      value <- fgwcA(data, population, distance, alfa, beta, e, a, b, m, c)\n      result <- list(\"membership\" = value$membership, \"centroid\" = value$centroid, \"objValue\" = value$objVal)\n      return(result)\n    }else if(input$methode==3){\n      print(\"FGWC-SA\")\n      source(paste(getwd(),\"/tools/analysis/spatial/msa.R\", sep=''))\n      value <- safgwc(data, population, distance, alfa, beta, e, a, b, m, c)\n      result <- list(\"membership\" = value$membership, \"centroid\" = value$centroid, \"objValue\" = value$objVal)\n      return(result)\n    }else{\n      print(\"FGWC-ABC\")\n      source(paste(getwd(),\"/tools/analysis/spatial/lastRide.R\", sep=''))\n      value <- abcfgwc(data, population, distance, alfa, beta, e, a, b, m, c)\n      result <- list(\"membership\" = value$membership, \"centroid\" = value$centroid, \"objValue\" = value$objVal)\n      return(result)\n    }\n  \n})\n\n################ other FUNC    #############\noutput$downloadResultAbc<- downloadHandler(\n  filename = function() {\n    paste('fuzzy_clustering', sep = '.', switch(\n      input$formatAbc, Word = 'docx', PDF = 'pdf', HTML = 'html'\n    ))\n  },\n  \n  content = function(file) {\n    src <- normalizePath('resultabc.Rmd')\n    \n    # temporarily switch to the temp dir, in case you do not have write\n    # permission to the current working directory\n    owd <- setwd(tempdir())\n    on.exit(setwd(owd))\n    file.copy(src, 'resultabc.Rmd')\n    \n    library(rmarkdown)\n    out <- render('resultabc.Rmd', switch(\n      input$formatAbc,\n      PDF = pdf_document(), HTML = html_document(), Word = word_document()\n    ))\n    file.rename(out, file)\n  }\n)\noutput$downloadPlot<- downloadHandler(\n  filename = function() {\n    paste('fuzzy_plot', sep = '.', switch(\n      input$formatPlot, Word = 'docx', PDF = 'pdf', HTML = 'html'\n    ))\n  },\n  \n  content = function(file) {\n    src <- normalizePath('plotabc.Rmd')\n    \n    # temporarily switch to the temp dir, in case you do not have write\n    # permission to the current working directory\n    owd <- setwd(tempdir())\n    on.exit(setwd(owd))\n    file.copy(src, 'plotabc.Rmd')\n    \n    library(rmarkdown)\n    out <- render('plotabc.Rmd', switch(\n      input$formatPlot,\n      PDF = pdf_document(), HTML = html_document(), Word = word_document()\n    ))\n    file.rename(out, file)\n  }\n)\n\n\nsaveIndex<-function(){\n  value<-indeksAbc()\n  return(value)\n}\nnamaMethod<-function(){\n  string<-paste(\"fgwc\",\"abc\",sep='')\n  return(string)\n}\nnameData<-function(){\n  return()\n}\nnamaPeta<-function(){\n  return(namePet())\n}\nnamePet<-reactive({\n  myshape<- input$shpPeta\n  if (is.null(myshape)) \n    return(NULL)       \n  \n  dir<-dirname(myshape[1,4])\n  \n  for ( i in 1:nrow(myshape)) {\n    file.rename(myshape[i,4], paste0(dir,\"/\",myshape[i,1]))}\n  temp<-myshape[1,1]\n  filename<-substr(temp, 1, nchar(temp)-4)\n  return(filename)\n})\nsaveMap<-function(){\n  return(peta())\n  #   library(ggplot2)\n  #   ggsave(\"my_large_plot.png\", scale = 3, dpi = 400)\n}\ndataPet<-function(){\n#   dataPeta()\n  dataMembership()\n}",
    "created" : 1469810023979.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2553539742",
    "id" : "9733A318",
    "lastKnownWriteTime" : 1443500210,
    "last_content_update" : 1443500210,
    "path" : "E:/Coding/R/FAST/Dari Server (Analysis Only)/fast-beta/tools/analysis/abc.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}